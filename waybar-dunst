#!/usr/bin/env -S python -u

from json import dumps, load
from pathlib import Path
from os import environ
from asyncio import run, Event
from typing import cast, TYPE_CHECKING, TypeVar

from dbus_fast.aio import MessageBus
from dbus_fast.proxy_object import BaseProxyInterface, BaseProxyObject

if TYPE_CHECKING:
    from typing import type_check_only

    @type_check_only
    class PropertiesProxyInterface(BaseProxyInterface):
        def on_properties_changed(self, _) -> None: ...

    @type_check_only
    class DunstProxyInterface(BaseProxyInterface):
        async def get_paused(self) -> bool: ...

        async def get_waiting_length(self) -> int: ...

def resolve_config():
    if 'XDG_CONFIG_HOME' in environ:
        config_home = Path(environ['XDG_CONFIG_HOME'])
    else:
        config_home = Path.home() / '.config'

    config_path = config_home / 'waybar' / 'dunst-config.json'

    if config_path.exists():
        return config_path

class Config(dict):
    T = TypeVar('T')

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.setdefault('format-paused', '\uf1f6{format_waiting}') # ï‡¶
        self.setdefault('format-waiting', ' {waiting_length}')

        self.setdefault('tooltip-format-paused', 'Paused{tooltip_format_waiting}')
        self.setdefault('tooltip-format-waiting', ', {waiting_length} pending notification(s)')
        self.setdefault('tooltip-format-waiting-empty', ', no pending notifications')

    @staticmethod
    def load() -> 'Config':
        config_path = resolve_config()

        if config_path is None:
            return Config()

        with open(config_path, encoding='utf-8') as config_file:
            return Config(load(config_file))

    def get_typed(self, key, typ: type[T], default: T = None) -> T:
        value = self.get(key, default)

        if not isinstance(value, typ):
            raise TypeError(f'Property "{key}" is not of type {typ.__name__}')

        return value

    def get_string(self, key, default = '') -> str:
        return self.get_typed(key, str, default)

class State:
    paused: bool
    waiting_length: int

    def __init__(self):
        self.paused = False
        self.waiting_length = 0

_state = State()
_config = Config.load()


def changed_notify(interface, changed, _):
    if interface != 'org.dunstproject.cmd0':
        return

    has_changed = False

    if 'paused' in changed:
        new_paused = changed['paused'].value

        if new_paused != _state.paused:
            _state.paused = new_paused
            has_changed = True

    if 'waitingLength' in changed:
        new_waiting_length = changed['waitingLength'].value

        if new_waiting_length != _state.waiting_length:
            _state.waiting_length = new_waiting_length
            has_changed = True

    if not has_changed:
        return

    update_module()


def build_waiting_part(prefix: str | None, data: dict[str, str]) -> str:
    prefix = f'{prefix}-' if prefix else ''

    if _state.waiting_length == 0:
        return (_config.get_string(f'{prefix}format-waiting-empty')
                                .format(**data))

    return (_config.get_string(f'{prefix}format-waiting')
            .format(**data))

def update_module() -> None:
    data = {}
    state = 'paused' if _state.paused else 'unpaused'

    default_format = _config.get_string('format')
    default_tooltip_format = _config.get_string('tooltip-format')

    state_format = _config.get_string(f'format-{state}', default_format)
    state_tooltip_format = _config.get_string(f'tooltip-format-{state}', default_tooltip_format)

    waiting_length_max = _config.get_typed('waiting-length-max', int, 9)

    if _state.waiting_length > waiting_length_max:
        data['waiting_length'] = f'{waiting_length_max}+'
    else:
        data['waiting_length'] = str(_state.waiting_length)


    data['format_waiting'] = build_waiting_part(None, data)
    data['tooltip_format_waiting'] = build_waiting_part('tooltip', data)

    text = state_format.format(**data)
    tooltip = state_tooltip_format.format(**data)

    data = {
        'text': text,
        'tooltip': tooltip,
        'class': state
    }

    print(dumps(data))

async def main() -> None:
    bus = await MessageBus().connect()

    introspection = await bus.introspect('org.freedesktop.Notifications',
                                         '/org/freedesktop/Notifications')

    notifications: BaseProxyObject = bus.get_proxy_object('org.freedesktop.Notifications',
                                         '/org/freedesktop/Notifications', introspection)

    properties = cast('PropertiesProxyInterface', notifications.get_interface('org.freedesktop.DBus.Properties'))
    dunst = cast('DunstProxyInterface', notifications.get_interface('org.dunstproject.cmd0'))

    properties.on_properties_changed(changed_notify)

    _state.paused = await dunst.get_paused()
    _state.waiting_length = await dunst.get_waiting_length()

    update_module()

    await Event().wait()

run(main())
